import pandas as pd
import matplotlib.pyplot as plt
import os
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from sklearn.cluster import KMeans

# ============================
# CONFIGURA√á√ÉO DE CAMINHOS
# ============================

CSV_PATH = r"END. TABELA EM CSV "
OUTPUT_DIR = r"END. RELATORIOS"
os.makedirs(OUTPUT_DIR, exist_ok=True)
PDF_PATH = os.path.join(OUTPUT_DIR, "relatorio_censo_escolar.pdf")

# ============================
#  PREPARA√á√ÉO DOS DADOS
# ============================

def carregar_e_limpar_dados():
    """
    Carrega a planilha, renomeia as colunas e limpa os dados para an√°lise.
    """
    print("\nüîÑ Carregando e limpando os dados...")
    df = pd.read_csv(CSV_PATH, sep=';', skiprows=[1], encoding='latin1')

    # PANDAS
    # Renomear colunas para facilitar o acesso
    df.columns = [     # altere os dados da tabela para fazer outras analises
        'Localizacao', 'Creche_Parcial', 'Creche_Integral', 'Pre_escola_Parcial',
        'Pre_escola_Integral', 'Anos_Iniciais_Parcial', 'Anos_Iniciais_Integral',
        'Anos_Finais_Parcial', 'Anos_Finais_Integral', 'Medio_Parcial',
        'Medio_Integral', 'EJA_Fundamental', 'EJA_Medio'
    ]

    # Remover linhas de subtotais e de locais espec√≠ficos
    df = df[~df['Localizacao'].isin(['BRASIL', 'Estadual e Municipal', 'Estadual', 'Municipal', 'Privada'])]  # altere os dados da tabela para fazer outras analises
    df.dropna(subset=['Localizacao'], inplace=True)
    df = df[df['Localizacao'] != '']
    df.fillna(0, inplace=True)

    # Converter colunas num√©ricas
    numeric_cols = df.columns[1:]
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col].astype(str).str.replace('.', '', regex=False).str.replace(',', '.', regex=False), errors='coerce')
    
    df.dropna(subset=numeric_cols, inplace=True)
    
    print("‚úÖ Dados limpos e prontos para an√°lise.")
    return df

# ============================
# ETAPA 2 - AN√ÅLISE DE DADOS E MACHINE LEARNING
# CALCULOS USANDO OS DADOS DA TABELA.

def calcular_totais_e_proporcoes(df):
    """
    Calcula o total de matr√≠culas por tipo de ensino e as propor√ß√µes.
    """
    # Adicionar colunas de total
    df['Total_Infantil'] = df['Creche_Parcial'] + df['Creche_Integral'] + df['Pre_escola_Parcial'] + df['Pre_escola_Integral']
    df['Total_Fundamental'] = df['Anos_Iniciais_Parcial'] + df['Anos_Iniciais_Integral'] + df['Anos_Finais_Parcial'] + df['Anos_Finais_Integral']
    df['Total_Medio'] = df['Medio_Parcial'] + df['Medio_Integral']
    df['Total_EJA'] = df['EJA_Fundamental'] + df['EJA_Medio']
    df['Total_Geral'] = df['Total_Infantil'] + df['Total_Fundamental'] + df['Total_Medio'] + df['Total_EJA']

    # Calcular as propor√ß√µes em rela√ß√£o ao total
    df['Prop_Infantil'] = (df['Total_Infantil'] / df['Total_Geral']) * 100
    df['Prop_Fundamental'] = (df['Total_Fundamental'] / df['Total_Geral']) * 100
    df['Prop_Medio'] = (df['Total_Medio'] / df['Total_Geral']) * 100
    df['Prop_EJA'] = (df['Total_EJA'] / df['Total_Geral']) * 100

    return df

def agrupar_por_localizacao(df):
    """
    Agrupa os dados por tipo de localiza√ß√£o (Urbana e Rural) e calcula a m√©dia.
    """
    print("\nüìä Agrupando dados por localiza√ß√£o...")
    
    # Criar uma coluna 'Tipo_Localizacao'
    df['Tipo_Localizacao'] = df['Localizacao'].apply(
        lambda x: 'Urbana' if 'Urbana' in x else 'Rural' if 'Rural' in x else 'Outro'
    )
    
    # Excluir linhas que n√£o s√£o nem 'Urbana' nem 'Rural'
    df = df[df['Tipo_Localizacao'] != 'Outro']
    
    # Agrupar e calcular a m√©dia das matr√≠culas
    grouped_df = df.groupby('Tipo_Localizacao')[['Total_Infantil', 'Total_Fundamental', 'Total_Medio', 'Total_EJA']].mean().reset_index()
    
    return grouped_df

def clustering_por_matriula(df): #A matr√≠cula, por ser um identificador √∫nico, n√£o pode ser utilizada como crit√©rio para agrupar dados semelhantes. 
                                 # Em vez disso, ela √© usada para identificar os registros individuais.
    """
    Usa K-Means para agrupar as cidades/regi√µes com base no perfil de matr√≠culas.
    """
    print("üß† Aplicando Clustering K-Means...")
    
    # Usar as propor√ß√µes como features para o clustering
    features = ['Prop_Infantil', 'Prop_Fundamental', 'Prop_Medio', 'Prop_EJA']
    
    # Remover linhas com valores nulos nas features
    df_clustering = df.dropna(subset=features)
    
    X = df_clustering[features]

    # Aplicar K-Means com 3 clusters
    try:
        kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
        df_clustering['Cluster'] = kmeans.fit_predict(X)
        print("‚úÖ Clustering conclu√≠do.")
        return df_clustering
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao aplicar K-Means: {e}")
        return df_clustering


def gerar_graficos(df_localizacao, df_clustering):
    """
    Gera gr√°ficos de barras e de pizza para visualiza√ß√£o dos dados.
    """
    print("üé® Gerando gr√°ficos...")
    # Gr√°fico 1: M√©dia de Matr√≠culas por Localiza√ß√£o (Urbana vs. Rural)
    df_localizacao.set_index('Tipo_Localizacao').plot(kind='bar', figsize=(8, 5))
    plt.title('M√©dia de Matr√≠culas por Localiza√ß√£o (Urbana vs. Rural)', fontsize=14)
    plt.xlabel('Localiza√ß√£o', fontsize=12)
    plt.ylabel('M√©dia de Matr√≠culas', fontsize=12)
    plt.xticks(rotation=0)
    plt.tight_layout()
    bar_path = os.path.join(OUTPUT_DIR, "matr√≠culas_por_localizacao.png")
    plt.savefig(bar_path)
    plt.close()

    # Gr√°fico 2: Distribui√ß√£o de matr√≠culas por cluster
    cluster_counts = df_clustering['Cluster'].value_counts(normalize=True) * 100
    cluster_counts.plot(kind='pie', autopct='%1.1f%%', figsize=(6, 6))
    plt.title('Distribui√ß√£o de Regi√µes por Perfil de Matr√≠cula (Clusters)', fontsize=14)
    plt.ylabel('')
    plt.tight_layout()
    pie_path = os.path.join(OUTPUT_DIR, "distribuicao_clusters.png")
    plt.savefig(pie_path)
    plt.close()

    print("‚úÖ Gr√°ficos gerados com sucesso.")
    return bar_path, pie_path

def gerar_pdf(df_localizacao, bar_path, pie_path):
    """
    Cria um relat√≥rio em PDF com as an√°lises e gr√°ficos.
    """
    print("\nüìÑ Gerando relat√≥rio em PDF...")
    styles = getSampleStyleSheet()
    doc = SimpleDocTemplate(PDF_PATH, pagesize=A4)
    story = []

    story.append(Paragraph("<b>Relat√≥rio de An√°lise do Censo Escolar</b>", styles['Title']))
    story.append(Spacer(1, 12))

    intro_text = """
    Este relat√≥rio foi gerado automaticamente a partir dos dados do Censo Escolar.
    Ele apresenta uma an√°lise das matr√≠culas por n√≠vel de ensino e localiza√ß√£o (Urbana/Rural),
    al√©m de agrupar regi√µes com perfis de matr√≠cula semelhantes usando Machine Learning (K-Means).
    """
    story.append(Paragraph(intro_text, styles['Normal']))
    story.append(Spacer(1, 12))

    story.append(Paragraph("<b>1. M√©dia de Matr√≠culas por Localiza√ß√£o</b>", styles['Heading2']))
    story.append(Paragraph(
        "Este gr√°fico compara a m√©dia de matr√≠culas em diferentes n√≠veis de ensino nas √°reas urbanas e rurais.", 
        styles['Normal']
    ))
    story.append(Image(bar_path, width=450, height=300))
    story.append(Spacer(1, 12))

    story.append(Paragraph("<b>2. Agrupamento de Regi√µes por Perfil de Matr√≠cula</b>", styles['Heading2']))
    story.append(Paragraph(
        "A an√°lise de clustering (K-Means) agrupa as regi√µes em perfis distintos. "
        "O gr√°fico de pizza abaixo mostra a porcentagem de regi√µes em cada um dos tr√™s clusters identificados.", 
        styles['Normal']
    ))
    story.append(Image(pie_path, width=400, height=400))
    story.append(Spacer(1, 12))
    
    story.append(Paragraph("<b>3. Principais M√©tricas</b>", styles['Heading2']))
    df_metrics = df_localizacao.set_index('Tipo_Localizacao').transpose()
    df_metrics.index.name = 'N√≠vel de Ensino'
    df_metrics.reset_index(inplace=True)

    table_data = [list(df_metrics.columns)] + df_metrics.values.tolist()
    table = Table(table_data, repeatRows=1)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
        ("BOTTOMPADDING", (0, 0), (-1, 0), 10),
        ("BACKGROUND", (0, 1), (-1, -1), colors.beige),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
    ]))
    story.append(table)
    story.append(Spacer(1, 12))

    doc.build(story)
    print(f"‚úÖ Relat√≥rio PDF gerado em: {PDF_PATH}")

# ============================
# PROGRAMA PRINCIPAL
# ============================
if __name__ == "__main__":
    df = carregar_e_limpar_dados()
    df = calcular_totais_e_proporcoes(df)
    
    # An√°lise de agrupamento
    df_clustering = clustering_por_matriula(df.copy())
    
    # An√°lise por localiza√ß√£o
    df_localizacao = agrupar_por_localizacao(df.copy())
    
    # Gera√ß√£o dos gr√°ficos
    bar_path, pie_path = gerar_graficos(df_localizacao, df_clustering)
    
    # Gera√ß√£o do PDF

    gerar_pdf(df_localizacao, bar_path, pie_path)
